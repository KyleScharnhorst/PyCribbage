from Cribbage import *
from Card.CardType import CardType
from Card.CardSuite import CardSuite
from Misc.Utils import *
import unittest

card_type_test_types = list(
    [("z", CardType.no_type),
    ("a", CardType.ace),
    ("1", CardType.ace),
    ("2", CardType.two),
    ("3", CardType.three),
    ("4", CardType.four),
    ("5", CardType.five),
    ("6", CardType.six),
    ("7", CardType.seven),
    ("8", CardType.eight),
    ("9", CardType.nine),
    ("10", CardType.ten),
    ("j", CardType.jack),
    ("11", CardType.jack),
    ("q", CardType.queen),
    ("12", CardType.queen),
    ("k", CardType.king),
    ("13", CardType.king)]
);

card_suite_test_types = list(
    [("x", CardSuite.no_type),
    ("s", CardSuite.spade),
    ("c", CardSuite.club),
    ("d", CardSuite.diamond),
    ("h", CardSuite.heart)]
);

# Generated by helper function. Contains all card type test 
# types combined with all card suite test types.
card_test_list = None

def generate_card_test_list():
    global card_test_list
    card_test_list = list()
    for card_type in card_type_test_types:
        for card_suite in card_suite_test_types:
            card_test_list.append( (card_type[0]+card_suite[0], 
                                    Card(card_type[1], card_type[1].get_card_value(), card_suite[1]) ) 
                                 )

class Test_atoi(unittest.TestCase):
    
    def test_atoi(self):
        self.assertEqual(atoi("asd"), 0)
        self.assertEqual(atoi("10c"), 10)
        self.assertEqual(atoi("11c1"), 11)
        self.assertEqual(atoi("765"), 765)
        
class Test_CardType(unittest.TestCase):
    
    def test_get_card_type(self):
        for card_test_case in card_test_list:
            self.assertEqual(CardType.get_card_type(card_test_case[0]), card_test_case[1].card_type)
            
    def test_get_card_value(self):
        for card_type in CardType.get_list():
            if card_type.value < 10:
                self.assertEqual(card_type.get_card_value(), card_type.value)
            else:
                self.assertEqual(card_type.get_card_value(), 10)
                
class Test_CardSuite(unittest.TestCase):
    
    def test_get_suite(self):
        for card_test_case in card_test_list:
            self.assertEqual(CardSuite.get_suite(card_test_case[0]), card_test_case[1].suite)
            
class Test_Card(unittest.TestCase):
    invalid_cards = list(
        [Card(CardType.no_type, 1, CardSuite.diamond),
         Card(CardType.ace, 0, CardSuite.diamond),
         Card(CardType.ace, 1, CardSuite.no_type)]
    );
    
    def test_is_valid_invalid_cards(self):
        for invalid_card in self.invalid_cards:
            self.assertFalse(invalid_card.is_valid())
            
    def test_create_card(self):
        for card_test in card_test_list:
            card = Card.create_card(card_test[0]);
            if card_test[1].card_type != CardType.no_type and card_test[1].suite != CardSuite.no_type:
                self.assertTrue(card.is_valid())
            else:
                self.assertFalse(card.is_valid())
            # Ensure type is correct
            self.assertEqual(card.card_type, card_test[1].card_type)
            # Ensure value is correct
            self.assertEqual(card.value, card_test[1].value)
            # Ensure suite is correct
            self.assertEqual(card.suite, card_test[1].suite)

    def test_basic_score(self):
        cut_card = None
        cut_card = handle_cut_card("ccard js", cut_card)
        self.assertEquals(handle_score("score jh,jd,jc,7c", cut_card), 12)

    def test_score_nobs(self):
        cut_card = None
        cut_card = handle_cut_card("ccard 4c", cut_card)
        self.assertEquals(handle_score("score 2h,kd,jc,7c", cut_card), 1)
        cut_card = handle_cut_card("ccard qs", cut_card)
        self.assertEquals(handle_score("score js,ad,4c,8s", cut_card), 1)
        cut_card = handle_cut_card("ccard ad", cut_card)
        self.assertEquals(handle_score("score qh,jd,9c,7c", cut_card), 1)
        cut_card = handle_cut_card("ccard 10h", cut_card)
        self.assertEquals(handle_score("score 6h,8s,jh,4c", cut_card), 1)
        cut_card = handle_cut_card("ccard 10h", cut_card)
        self.assertEquals(handle_score("score 2c,4d,6s,8h", cut_card), 0)

    
#class Test_CardHand(unittest.TestCase):
    
#    def test_create_hand(self):
#        raise NotImplementedError
    
#    def test_score_flush(self):
#        raise NotImplementedError 
    
#    def test_score_multiples(self):
#        raise NotImplementedError   
    
    def test_score_runs(self):
        cut_card = None
        cut_card = handle_cut_card("ccard ah", cut_card)
        self.assertEquals(handle_score("score as,ac,2s,3d", cut_card), 15)
        cut_card = handle_cut_card("ccard ah", cut_card)
        self.assertEquals(handle_score("score as,2c,2s,3d", cut_card), 16)
        cut_card = handle_cut_card("ccard ah", cut_card)
        self.assertEquals(handle_score("score as,2c,3s,4d", cut_card), 10)
        cut_card = handle_cut_card("ccard ah", cut_card)
        self.assertEquals(handle_score("score 2s,3c,4s,5d", cut_card), 5)
        cut_card = handle_cut_card("ccard ah", cut_card)
        self.assertEquals(handle_score("score 2s,3c,8s,6d", cut_card), 3)
    
    def test_score_fifteens(self):
        hand = CardHand([
            Card(CardType.five, 5, CardSuite.spade),
            Card(CardType.five, 5, CardSuite.diamond),
            Card(CardType.five, 5, CardSuite.heart),
            Card(CardType.jack, 10, CardSuite.spade)
            ], Card(CardType.five, 5, CardSuite.spade))# cut card

        hand_scorer = HandScorer(hand)
        score = hand_scorer.score_fifteens()
        self.assertEqual(score, 16)
    
#    def test_isValid(self):
#        raise NotImplementedError

if __name__ == '__main__':
    generate_card_test_list()
    unittest.main()